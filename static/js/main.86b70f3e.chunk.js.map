{"version":3,"sources":["index.js"],"names":["chunk","require","x","Square","props","value","className","onChange","e","i","target","cellIndex","HintSquare","readOnly","Board","createTable","sudo","squares","hints","table","console","log","children","j","push","renderHintSquare","renderSquare","key","this","bind","React","Component","Game","state","history","sudoku","makepuzzle","stepNumber","cellId","slice","length","parseInt","completePuzz","isNaN","alert","setState","concat","step","solved","current","curr_hints","moves","map","move","desc","onClick","jumpTo","status","style","checkEqual","val","index","handleClick","solveClick","array","solvepuzzle","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.86b70f3e.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport sudoku from 'sudoku';\r\nimport './index.css';\r\n\r\nvar chunk = require('lodash.chunk');\r\nvar x = 0; //index\r\n\r\nfunction Square(props)\r\n{\r\n  \r\n     return (\r\n        <input value= {props.value} className=\"square\" onChange = {(e,i) => props.onChange(e.target.value, props.cellIndex)} >\r\n    \r\n        </input>\r\n      );\r\n}\r\n\r\n  \r\nfunction HintSquare(props)\r\n{\r\n  return (\r\n     <input value= {props.value} className=\"hintsquare\"  readOnly>\r\n   \r\n     </input>\r\n   );\r\n}\r\n  class Board extends React.Component {\r\n  \r\n    renderSquare(i) \r\n    {\r\n    \r\n      x = x + 1\r\n      return <Square\r\n                cellIndex = {x}\r\n                value ={i}\r\n                key= {x}\r\n                onChange = {this.props.onChange.bind(this) }\r\n          \r\n            />;\r\n    }\r\n    renderHintSquare(i) \r\n    {\r\n      x = x + 1\r\n      return <HintSquare \r\n                cellIndex = {x}\r\n                value ={i}\r\n                key= {x}\r\n            \r\n            />;\r\n    }\r\n    createTable = () => \r\n    {\r\n      var sudo = chunk(this.props.squares,9)\r\n      var hints = chunk(this.props.hints.squares,9)\r\n      var table = []\r\n      \r\n      x = 0 //reset index\r\n    \r\n      console.log(sudo)\r\n      for (let i = 0; i < 9; i++) \r\n      {\r\n        let children = []\r\n        for (let j = 0; j < 9; j++) \r\n        {\r\n          \r\n\r\n          if ( j%3 === 0) //for vertical styling\r\n          {\r\n            if(hints[i][j] != null )\r\n            {\r\n              children.push(<td className=\"ySodu\">{ this.renderHintSquare(sudo[i][j])}</td>)\r\n              \r\n            }\r\n            else if(sudo[i][j] == null)\r\n            {\r\n      \r\n              children.push(<td className=\"ySodu\">{ this.renderSquare(\"\")}</td>)\r\n            }\r\n            else\r\n            {\r\n              children.push(<td className=\"ySodu\">{ this.renderSquare(sudo[i][j] )}</td>)\r\n            }\r\n          }\r\n          else\r\n          {\r\n            if( hints[i][j] != null)\r\n            {\r\n              children.push(<td>{ this.renderHintSquare(sudo[i][j])}</td>)\r\n            }\r\n            else if(sudo[i][j] == null)\r\n            {\r\n              children.push(<td>{ this.renderSquare(\"\")}</td>)\r\n            }\r\n            else{\r\n              children.push(<td>{ this.renderSquare(sudo[i][j] )}</td>)\r\n            }\r\n          }\r\n      \r\n        }\r\n\r\n        if (i%3 === 0) //for horizontal styling\r\n        {\r\n          table.push(<tr className=\"xSodu\">{children}</tr>)\r\n        }\r\n        else\r\n        {\r\n          table.push(<tr>{children}</tr>)\r\n        }      \r\n      }\r\n      return table\r\n    }\r\n  \r\n    render() \r\n    {\r\n      return (\r\n        <div>\r\n        <table>\r\n          <tbody>{this.createTable()}</tbody>\r\n\r\n       </table>\r\n       </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  class Game extends React.Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            history: [ { squares: sudoku.makepuzzle()}],\r\n            stepNumber: 0,\r\n  \r\n\r\n        };\r\n    }\r\n   \r\n    handleClick(i, cellId)\r\n    {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n\r\n       \r\n        squares[cellId-1] = parseInt(i)\r\n       \r\n\r\n        if(completePuzz(squares) == null) \r\n        {\r\n          if (isNaN(i) || i > 8 || i < 0) //numbers other than allowed \r\n          {\r\n            alert(\"only numbers 0-8 allowed\")\r\n            squares[cellId-1] = null\r\n            return            \r\n          }\r\n          else if (i === \"\" ) //backspaces \r\n          {\r\n            squares[cellId-1] = null\r\n            this.setState({history: history.concat([{squares: squares}]), stepNumber: history.length});\r\n            return\r\n          }\r\n          else //valid number\r\n          {\r\n\r\n          this.setState({history: history.concat([{squares: squares}]), stepNumber: history.length});\r\n          \r\n          return\r\n          }\r\n        }\r\n        \r\n        this.setState({history: history.concat([{squares: squares}]), stepNumber: history.length});\r\n    }\r\n    jumpTo(step)\r\n    {\r\n        this.setState({\r\n            stepNumber: step,\r\n          \r\n        });\r\n    }\r\n    checkEqual(squares, solved)\r\n    {\r\n      if(solved == null) return false\r\n      for (var i = 0; i < squares.length; i++) {\r\n        if (squares[i] !== solved[i] || squares[i] == null) return false;\r\n      }\r\n      return true\r\n    \r\n    }\r\n    solveClick()\r\n    {\r\n      const history = this.state.history;\r\n      const current = history[this.state.stepNumber];\r\n      var curr_hints = history[0].squares\r\n      var solved = completePuzz(current.squares)\r\n      if(curr_hints != null ) // check if first block is hint square\r\n      {\r\n        curr_hints[0] = null\r\n        this.setState({hints: curr_hints })\r\n      }\r\n      solved[0] = null\r\n\r\n      this.setState({history: history.concat([{squares: solved}]), stepNumber: history.length})\r\n\r\n    }\r\n    render() \r\n    {\r\n\r\n      const history = this.state.history;\r\n      const current = history[this.state.stepNumber];\r\n\r\n\r\n      const solved = completePuzz(current.squares)\r\n  \r\n\r\n      var squares = current.squares\r\n      const moves = history.map((step,move) =>\r\n      {\r\n          const desc = move ? 'Go to move #' + move : 'Go to game start';\r\n          return (\r\n              <li key={move}>\r\n                  <button onClick={() => \r\n                    this.jumpTo(move)}>\r\n                        {desc} \r\n                    </button>\r\n              </li>\r\n          );\r\n      });\r\n      let status = \"Not Completed\";\r\n      var style = \"game-board\"\r\n   \r\n      if(this.checkEqual(squares,solved))\r\n      {\r\n        style = \"game-win\"\r\n        status = \"Completed\"\r\n      }\r\n      return (\r\n        <div className=\"game\">\r\n          <div className= { style }>\r\n             <Board squares={squares} onChange={(val,index) => this.handleClick(val,index)} hints = {this.state.history[0]}/>\r\n             \r\n          </div>\r\n          <div className=\"game-info\">\r\n            <button onClick={() => this.solveClick()}>Complete most of the puzzle</button>\r\n            <div>{ status }</div>\r\n            <ol>{moves}</ol>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );\r\n  \r\n\r\n\r\n  //helper function\r\n  function completePuzz(array)\r\n  {\r\n    \r\n    return sudoku.solvepuzzle(array)\r\n    \r\n  }"],"sourceRoot":""}